/// The name of the class used to define a flexgrid container.
/// @type string
/// @pattern flexgrid
$flexgrid-class-container: '.zui-grid-container' !default;

/// The name of the class used to define a fluid flexgrid container.
/// @type string
/// @pattern flexgrid
$flexgrid-class-container-fluid: '.zui-grid-container-fluid' !default;

/// The name of the class used to define a row in a flexgrid container.
/// @type string
/// @pattern flexgrid
$flexgrid-class-row: '.zui-grid-row' !default;

/// The name of the class used to define a row in a flexgrid container.
/// @type string
/// @pattern flexgrid
$flexgrid-class-row-reverse: '.zui-grid-row-reverse' !default;

/// The prefix of the class used to define an extra small size column in a flexgrid container.
/// @type string
/// @pattern flexgrid
$flexgrid-class-xs-column: '.zui-grid-xs-column-' !default;

/// The prefix of the class used to push an element in an extra small size column in a flexgrid container.
/// @type string
/// @pattern flexgrid
$flexgrid-class-xs-push: '.zui-grid-xs-push-' !default;

/// The prefix of the class used to define a small size column in a flexgrid container.
/// @type string
/// @pattern flexgrid
$flexgrid-class-sm-column: '.zui-grid-sm-column-' !default;

/// The prefix of the class used to push an element in a small size column in a flexgrid container.
/// @type string
/// @pattern flexgrid
$flexgrid-class-sm-push: '.zui-grid-sm-push-' !default;

/// The prefix of the class used to define a medium size column in a flexgrid container.
/// @type string
/// @pattern flexgrid
$flexgrid-class-md-column: '.zui-grid-md-column-' !default;

/// The prefix of the class used to push an element in a mediumn size column in a flexgrid container.
/// @type string
/// @pattern flexgrid
$flexgrid-class-md-push: '.zui-grid-md-push-' !default;

/// The prefix of the class used to define a large size column in a flexgrid container.
/// @type string
/// @pattern flexgrid
$flexgrid-class-lg-column: '.zui-grid-lg-column-' !default;

/// The prefix of the class used to push an element in a large size column in a flexgrid container.
/// @type string
/// @pattern flexgrid
$flexgrid-class-lg-push: '.zui-grid-lg-push-' !default;

/// The amount of columns to use in the grid.
/// @type integer
/// @pattern flexgrid
$flexgrid-column-count: 12 !default;

/// The media query used to match extra small screens.
/// @type string
/// @pattern flexgrid
$flexgrid-media-query-xs: 'only screen and (max-width: #{$screen-xs-max})' !default;

/// The media query used to match small screens.
/// @type string
/// @pattern flexgrid
$flexgrid-media-query-sm: 'only screen and (min-width: #{$screen-sm-min}) and (max-width: #{$screen-sm-max})' !default;

/// The media query used to match medium screens.
/// @type string
/// @pattern flexgrid
$flexgrid-media-query-md: 'only screen and (min-width: #{$screen-md-min}) and (max-width: #{$screen-md-max})' !default;

/// The media query used to match large screens.
/// @type string
/// @pattern flexgrid
$flexgrid-media-query-lg: 'only screen and (min-width: #{$screen-lg-min})' !default;

/// A mixin that sets the flex display mode on an element.
/// @pattern flexgrid
@mixin zui-flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

/// A mixin that sets the flex mode on an element.
/// @pattern flexgrid
@mixin zui-flex($values) {
    -webkit-box-flex: $values;
    -moz-box-flex: $values;
    -webkit-flex: $values;
    -ms-flex: $values;
    flex: $values;
}

/// A mixin that sets the flex-wrap mode on an element.
/// @pattern flexgrid
@mixin zui-flex-wrap($values) {
    -webkit-flex-wrap: $values;
    -ms-flex-wrap: $values;
    flex-wrap: $values;
}

/// A mixin that sets the order on a flex element.
/// @pattern flexgrid
@mixin zui-order($val) {
    -webkit-box-ordinal-group: $val;
    -moz-box-ordinal-group: $val;
    -ms-flex-order: $val;
    -webkit-order: $val;
    order: $val;
}

/// A mixin that defines a cell in the flexgrid.
/// @pattern flexgrid
@mixin zui-flexgrid-cell($class-column, $class-push, $i, $percentage) {
    #{$class-column}#{$i} {
        flex-basis: $percentage;
        max-width: $percentage;
    }

    #{$class-push}#{$i} {
        margin-left: $percentage;
    }

    #{$flexgrid-class-row-reverse} #{$class-push}#{$i} {
        margin-left: inherit;
        margin-right: $percentage;
    }
}

/// A mixin that defines a row of cells in the flexgrid.
/// @pattern flexgrid
@mixin zui-flexgrid-cells($class-column, $class-push) {
    @for $i from 1 through $flexgrid-column-count {
        $percentage: percentage(1 / $flexgrid-column-count * $i);

        @include zui-flexgrid-cell($class-column, $class-push, $i, $percentage);
    }
}

#{$flexgrid-class-container},
#{$flexgrid-class-container-fluid} {
    margin-right: auto;
    margin-left: auto;
}

#{$flexgrid-class-container-fluid} {
    padding-right: 2rem;
    padding-left: 2rem;
}

#{$flexgrid-class-row} {
    @include zui-flexbox();
    @include zui-flex-wrap(wrap);

    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
}

#{$flexgrid-class-row-reverse} {
    @extend #{$flexgrid-class-row};

    -webkit-box-direction: reverse;
    -webkit-flex-direction: row-reverse;
    -ms-flex-direction: row-reverse;
    flex-direction: row-reverse;
}

@media #{$flexgrid-media-query-lg} {
    @include zui-flexgrid-cells(
            $flexgrid-class-lg-column,
            $flexgrid-class-lg-push
    );
}

@media #{$flexgrid-media-query-md} {
    @include zui-flexgrid-cells(
            $flexgrid-class-md-column,
            $flexgrid-class-md-push
    );
}

@media #{$flexgrid-media-query-sm} {
    @include zui-flexgrid-cells(
            $flexgrid-class-sm-column,
            $flexgrid-class-sm-push
    );
}

@media #{$flexgrid-media-query-xs} {
    @include zui-flexgrid-cells(
            $flexgrid-class-xs-column,
            $flexgrid-class-xs-push
    );
}
